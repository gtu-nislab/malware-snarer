
import urllib.request
from os import walk
import hashlib
import os

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


#  "https://urlhaus.abuse.ch/downloads/text" sitesindeki tum dosyalari indirir.


class UrlHaus:
    def __init__(self, urlPath,dirname):
        self.urlPath = urlPath
        self.allUrlLists =""
        self.dirname=dirname
        self.alreadydownloadedlist=[]

    def download(self, link,  filename):
        print(bcolors.BOLD + bcolors.WARNING + "\nLink :", end="     ")
        print(bcolors.OKBLUE + str(link))
        exestr = link[len(link)-4:len(link)-1]

        if exestr == "exe":
            try:
                urllib.request.urlretrieve(link, filename.rstrip('\r'))
                isdonwloaded, md5=self.rename_with_md5(filename.rstrip('\r'))

                self.print_status("MD5 :", "  " + md5, bcolors.OKBLUE)
                if isdonwloaded == -1:
                    self.print_status("Status:", "This file is already downloaded!", bcolors.WARNING)
                else:
                    self.print_status("Status:", "Successfully downloaded!", bcolors.OKBLUE)
            except:
                self.print_status("Status:", "Error link!", bcolors.FAIL)
        else:
            self.print_status("Status:", "Not exe fÄ±le!", bcolors.FAIL)


    def print_status(self, status, message, color):
        print(bcolors.BOLD + bcolors.WARNING + status, end="    ")
        print(color + message)

    def get_all_links(self):
        with urllib.request.urlopen(self.urlPath) as response:
            data = response.read()
        print(bcolors.BOLD + bcolors.WARNING +"\nGetting all links\n")
        httpString = "http"
        self.allUrlLists = list()
        allData = data.decode('utf8').split('\n')

        for link in allData:
            if httpString in link:
                link.replace("\n", "")
                self.allUrlLists.append(link)

    def print_lists(self, urllist):
        for link in urllist:
            print(bcolors.OKBLUE + link)

    def download_all_files(self):
        self.get_all_links()
        self.print_lists(self.allUrlLists)
        self.alreadydownloadedlist = self.get_already_downloaded_list()
        print(bcolors.BOLD + bcolors.WARNING +"\nDownloading files\n")

        for url in self.allUrlLists:
            file = self.dirname + "/" + url[7:len(url)].replace("/", "-")
            self.download(url, file)

    def get_already_downloaded_list(self):
        filelist=[]
        for (dirpath, dirnames, filenames) in walk(self.dirname):
            filelist.extend(filenames)
            break
        return filelist

    def is_already_downloaded(self, link):
        if link in self.alreadydownloadedlist:
            return -1
        else:
            return 0

    def rename_with_md5(self, file):
        with open(file, 'rb') as file_to_check:
            data = file_to_check.read()
            md5_returned = hashlib.md5(data).hexdigest()

        isdownloaded = self.is_already_downloaded(md5_returned + '.exe')

        if isdownloaded == -1:
            os.remove(file)
        else:
            os.rename(file, self.dirname + "/" + md5_returned + '.exe')
            newfile="LINK => "+file[len(self.dirname) + 1:] + " *** MD5 => " + md5_returned + "\n"
            with open("../UrlHausDownloadedList.txt", "a") as myfile:
                myfile.write(newfile)
        return isdownloaded, md5_returned



urlhaus = UrlHaus("https://urlhaus.abuse.ch/downloads/text", "../exetemp")
urlhaus.download_all_files()

