from pymongo import MongoClient
from bson.objectid import ObjectId
from flask import Flask,render_template,jsonify,json,request


application = Flask(__name__)

client = MongoClient('localhost:27017')
db = client.maldect

@application.route('/')
def showResList():
    return render_template('list.html')

@application.route('/peinfo')
def showOpcodeList():
    return render_template('peinfo.html')

@application.route('/hash')
def showBigramList():
    return render_template('hash.html')

@application.route('/anomalies')
def showCsvList():
    return render_template('anomalies.html')

@application.route("/getResList",methods=['POST'])
def getResList():
    try:
        vtresponces = db.vtresponses.find()
        
        vtReslist = []
        for vtres in vtresponces:
            print(vtres)
            vtResItem = {
                    'md5':vtres['md5'],
                    'sha1':vtres['sha1'],
                    'sha256':vtres['sha256'],
                    'scan_id':vtres['scan_id'],
                    'resource':vtres['resource'],
                    'response_code': vtres['response_code'],
                    'scan_date': vtres['scan_date'],
                    'permalink': vtres['permalink'],
                    'verbose_msg': vtres['verbose_msg'],
                    'total': vtres['total'],
                    'positives': vtres['positives'],
                    'id': str(vtres['_id'])
                    }
            vtReslist.append(vtResItem)
    except Exception as e:
        return str(e)
    return json.dumps(vtReslist)


@application.route("/getHashList", methods=['POST'])
def getHashList():
    try:
        hashres = db.hash.find()

        hashList = []
        for hash in hashres:
            print(hash)
            hashItem = {
                'hash': hash['hash'],
                'SHA1': hash['SHA-1'],
                'importhash': hash['import-hash'],
                'hash': hash['hash'],
                'ssdeep': hash['ssdeep'],
                'MD5': hash['MD5'],
                'class_id': hash['class_id'],
                'SHA512': hash['SHA-512'],
                'SHA256': hash['SHA-256'],
                'id': str(hash['_id'])
            }
            hashList.append(hashItem)
    except Exception as e:
        return str(e)
    return json.dumps(hashList)

@application.route("/getAnomalies", methods=['POST'])
def getAnomalies():
    try:
        anomaliesData = db.anomalies.find()

        anomaliesList = []
        for anomalies in anomaliesData:
            print(anomalies)
            anomaliesItem = {
                'hash': anomalies['hash'],
                'timeDateTooLow': anomalies['timeDateTooLow'],
                'headerChecksumZero': anomalies['headerChecksumZero'],
                'unorderedSectionNumber': anomalies['unorderedSectionNumber'],
                'EnrtyPointOutside': anomalies['EnrtyPointOutside'],
                'nonasciiSectionName': anomalies['non-asciiSectionName'],
                'illegalSizeOptHeader': anomalies['illegalSizeOptHeader'],
                'fileIsPacked': anomalies['fileIsPacked'],
                'unorderedSectionName': anomalies['unorderedSectionName'],
                'NumberOfRvaAndSizes': anomalies['NumberOfRvaAndSizes'],
                'callbackFunction': anomalies['callbackFunction'],
                'LoaderFlagsIlegal': anomalies['LoaderFlagsIlegal'],
                'illegalSizeOfRawData': anomalies['illegalSizeOfRawData'],
                'timeDateInFuture': anomalies['timeDateInFuture'],
                'id': str(anomalies['_id'])
            }
            anomaliesList.append(anomaliesItem)
    except Exception as e:
        return str(e)
    return json.dumps(anomaliesList)

@application.route("/getPeInfo", methods=['POST'])
def getPeInfo():
    try:
        peinfoData = db.peinfo.find()

        peinfoList = []
        for peinfo in peinfoData:
            print(peinfo)
            peinfoItem = {
                'hash': peinfo['hash'],
                'SectionsMeanRawsize': peinfo['SectionsMeanRawsize'],
                'VersionInformationSize': peinfo['VersionInformationSize'],
                'SizeOfStackCommit': peinfo['SizeOfStackCommit'],
                'SizeOfUninitializedData': peinfo['SizeOfUninitializedData'],
                'SectionAlignment': peinfo['SectionAlignment'],
                'SectionsMinRawsize': peinfo['SectionsMinRawsize'],
                'ResourcesMeanSize': peinfo['ResourcesMeanSize'],
                'MinorImageVersion': peinfo['MinorImageVersion'],
                'ResourcesNb': peinfo['ResourcesNb'],
                'MajorOperatingSystemVersion': peinfo['MajorOperatingSystemVersion'],
                'SectionMaxVirtualsize': peinfo['SectionMaxVirtualsize'],
                'NumberOfRvaAndSizes': peinfo['NumberOfRvaAndSizes'],
                'ExportNb': peinfo['ExportNb'],
                'ResourcesMinSize': peinfo['ResourcesMinSize'],
                'SectionsMeanVirtualsize': peinfo['SectionsMeanVirtualsize'],
                'MajorLinkerVersion': peinfo['MajorLinkerVersion'],
                'SizeOfOptionalHeader': peinfo['SizeOfOptionalHeader'],
                'SizeOfHeapCommit': peinfo['SizeOfHeapCommit'],
                'ResourcesMaxSize': peinfo['ResourcesMaxSize'],
                'SizeOfHeapReserve': peinfo['SizeOfHeapReserve'],
                'MinorSubsystemVersion': peinfo['MinorSubsystemVersion'],
                'LoaderFlags': peinfo['LoaderFlags'],
                'CheckSum': peinfo['CheckSum'],
                'ImportsNb': peinfo['ImportsNb'],
                'ResourcesMaxEntropy': peinfo['ResourcesMaxEntropy'],
                'BaseOfData': peinfo['BaseOfData'],
                'SectionsMeanEntropy': peinfo['SectionsMeanEntropy'],
                'SectionsMinVirtualsize': peinfo['SectionsMinVirtualsize'],
                'SizeOfStackReserve': peinfo['SizeOfStackReserve'],
                'SectionsMaxRawsize': peinfo['SectionsMaxRawsize'],
                'Machine': peinfo['Machine'],
                'Characteristics': peinfo['Characteristics'],
                'FileAlignment': peinfo['FileAlignment'],
                'SizeOfCode': peinfo['SizeOfCode'],
                'ImportsNbDLL': peinfo['ImportsNbDLL'],
                'ImageBase': peinfo['ImageBase'],
                'SectionsNb': peinfo['SectionsNb'],
                'SizeOfInitializedData': peinfo['SizeOfInitializedData'],
                'MajorSubsystemVersion': peinfo['MajorSubsystemVersion'],
                'MajorImageVersion': peinfo['MajorImageVersion'],
                'SizeOfHeaders': peinfo['SizeOfHeaders'],
                'ImportsNbOrdinal': peinfo['ImportsNbOrdinal'],
                'BaseOfCode': peinfo['BaseOfCode'],
                'DllCharacteristics': peinfo['DllCharacteristics'],
                'ResourcesMinEntropy': peinfo['ResourcesMinEntropy'],
                'ResourcesMeanEntropy': peinfo['ResourcesMeanEntropy'],
                'SizeOfImage': peinfo['SizeOfImage'],
                'MinorOperatingSystemVersion': peinfo['MinorOperatingSystemVersion'],
                'SectionsMaxEntropy': peinfo['SectionsMaxEntropy'],
                'Subsystem': peinfo['Subsystem'],
                'MinorLinkerVersion': peinfo['MinorLinkerVersion'],
                'LoadConfigurationSize': peinfo['LoadConfigurationSize'],
                'SectionsMinEntropy': peinfo['SectionsMinEntropy'],
                'AddressOfEntryPoint': peinfo['AddressOfEntryPoint'],
                'id': str(peinfo['_id'])
            }
            peinfoList.append(peinfoItem)
    except Exception as e:
        return str(e)
    return json.dumps(peinfoList)
@application.route("/deleteRes",methods=['POST'])
def deleteRes():
    try:
        resId = request.json['id']
        db.vtresponses.remove({'_id':ObjectId(resId)})
        return jsonify(status='OK',message='deletion successful')
    except Exception as e:
        return jsonify(status='ERROR',message=str(e))

if __name__ == "__main__":
    application.run(host='0.0.0.0')

