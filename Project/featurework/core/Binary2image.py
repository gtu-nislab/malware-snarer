#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Binary to Image Converter
# Read executable binary files and convert them RGB and greyscale png images
#
# Author: Necmettin Çarkacı
# E-mail: necmettin [ . ] carkaci [ @ ] gmail [ . ] com
#



import os, math
#import binwalk
from PIL import Image


def getBinaryData(filename):
    binaryValues = []
    file = open(filename, "rb")

    try:

        # read byte by byte
        data = file.read(1)

        while data != b'':

            # store value to array
            binaryValues.append(ord(data))

            # get next byte value
            data = file.read(1)

    finally:
        file.close()

    return binaryValues


def createGreyScaleImage(filename, delimeter=',', width=0, ext='.png'):
    """
        Create greyscale image from binary data
        Use given with if defined or
        create square size image from binary data.

        :param filename:
        :param ext:
        :return:
    """

    # Read binary file
    binary_data = getBinaryData(filename)

    # with don't specified any with value
    if width == 0:

        size = len(binary_data)

        # source Malware images: visualization and automatic classification by L. Nataraj
        # url : http://dl.acm.org/citation.cfm?id=2016908

        if (size < 10240):
            width = 32
        elif (10240 <= size <= 10240 * 3):
            width = 64
        elif (10240 * 3 <= size <= 10240 * 6):
            width = 128
        elif (10240 * 6 <= size <= 10240 * 10):
            width = 256
        elif (10240 * 10 <= size <= 10240 * 20):
            width = 384
        elif (10240 * 20 <= size <= 10240 * 50):
            width = 512
        elif (10240 * 50 <= size <= 10240 * 100):
            width = 768
        else:
            width = 1024

        height = int(size / width) + 1

    else:

        width  = int(math.sqrt(len(binary_data))) + 1
        height = width

    try:
        image = Image.new('L', (width, height))
        image.putdata(binary_data)

        # setup output filename
        dirname = os.path.dirname(filename)
        name, _ = os.path.splitext(filename)
        name    = os.path.basename(name)
        imagename = dirname+os.sep+'GRY'+os.sep+name + '_GRY'+ext
        os.makedirs(os.path.dirname(imagename), exist_ok=True)

        image.save(imagename)
    except Exception as err:
        print(err)


def createRGBImage(filename, delimeter=',', ext='.png'):
    """
         Create RGB image from 24 bit binary data
         8bit Red, 8 bit Green, 8bit Blue

        :param filename:
        :param exet:
        :return:
    """

    # Start variables
    index = 0
    RGBData = []

    # Read binary file
    binary_data = getBinaryData(filename)

    # Create R,G,B pixels
    while ((index + 3) < len(binary_data)):
        R = binary_data[index]
        index = index + 1
        G = binary_data[index]
        index = index + 1
        B = binary_data[index]
        index = index + 1
        RGBData.append((R, G, B))

    # Create RGB image
    try:
        size = int(math.sqrt((len(RGBData)))) + 1
        # create a new blank black image
        image = Image.new('RGB', (size, size), "black")
        image.putdata(RGBData)

        # setup output filename
        dirname = os.path.dirname(filename)
        name, _ = os.path.splitext(filename)
        name    = os.path.basename(name)
        imagename = dirname+os.sep+'RGB'+os.sep+name + '_RGB'+ext
        os.makedirs(os.path.dirname(imagename), exist_ok=True)

        image.save(imagename)
    except Exception as err:
        print(err)

