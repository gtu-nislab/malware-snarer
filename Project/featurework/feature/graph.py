#!/usr/bin/env python
"""
#
# Author: Necmettin Çarkacı
#
# E-mail: necmettin [ . ] carkaci [ @ ] gmail [ . ] com
#
# Usage :graph.py file
#   dataset : file or directory
"""

from featurework.core import OpCode

def getUndirectedGraph(filename, delimeter=","):

    adjacency_matrix = {}

    opcode_list = OpCode.getOpcodeList(filename)

    for index in range(len(opcode_list) - 1):

        opcode = opcode_list[index]
        suffix_opcode = opcode_list[index + 1]

        cell = opcode+"<-->"+suffix_opcode
        cell_inverse = suffix_opcode + "<-->" + opcode

        if cell in adjacency_matrix.keys():
            adjacency_matrix[cell] += 1

        elif cell_inverse in adjacency_matrix.keys():
            adjacency_matrix[cell_inverse] += 1
        else:
            adjacency_matrix[cell] = 1

    return adjacency_matrix #, opcode_list


def getDirectedGraph(filename, delimeter=","):

    adjacency_matrix = {}

    opcode_list = OpCode.getOpcodeList(filename)

    for index in range(len(opcode_list) - 1):
        opcode = opcode_list[index]
        suffix_opcode = opcode_list[index + 1]

        cell = opcode+"-->"+suffix_opcode

        if cell in adjacency_matrix.keys():
            adjacency_matrix[cell] += 1
        else:
            adjacency_matrix[cell] = 1

    return adjacency_matrix #, opcode_list


def getDirectedGraphFromOpcode(opcodefilename, delimeter=","):

    adjacency_matrix = {}
    with open(opcodefilename,'r') as input_file:
        content = input_file.read()
    opcode_list = content.split(delimeter)

    for index in range(len(opcode_list) - 1):
        opcode = opcode_list[index]
        suffix_opcode = opcode_list[index + 1]

        cell = opcode+"-->"+suffix_opcode

        if cell in adjacency_matrix.keys():
            adjacency_matrix[cell] += 1
        else:
            adjacency_matrix[cell] = 1

    return adjacency_matrix #, opcode_list
