import os
import peutils
import pefile

from lib import fileutil


def getPEIDSign(filename):
    # Read file content as binary
    #https://github.com/erocarrera/pefile/blob/wiki/PEiDSignatures.md
    CWD = os.path.abspath(os.path.dirname(__file__))
    #https://www.aldeid.com/wiki/PEiD
    #http://handlers.sans.org/jclausing/userdb.txt
    USERDB = os.path.join(CWD, os.path.normpath("etc/UserDB.TXT"))
    try:
        pe = pefile.PE(filename)
    except:
        print("cannot open file")
        return
    with open(filename,'rb') as input_file:
        code = input_file.read()

    signatures = peutils.SignatureDatabase(USERDB)
    pe = pefile.PE(filename)
    matches = signatures.match(pe, ep_only = True)
    x ={}
    i=0;
    for m in matches:
    	i+=1
    	x['PEID_sign'+str(i)]=m
    return x

def getPacker_used(filename):
    sign = getPEIDSign(filename)
    if "pack" in sign:
        return 1
    else:
        return 0
    '''

    :param filename:
    :return: boolean - whether packer is used or not
    '''
'''
if __name__ == '__main__':
    directory = "dataset"
    extensionList = ['.exe', '.dll']

    listOfFile = fileutil.getFilePaths(directory, extensionList)
    for filename in listOfFile:
        print(filename)
        print(getPEIDSign(filename))
'''
