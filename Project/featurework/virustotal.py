

import requests
import hashlib
import time
from pymongo import MongoClient
import random
from lib import fileutil


def getVirustotalReport(filename, API_KEY,isFile=1, proxy=None):

      headers = {
      "Accept-Encoding": "gzip, deflate",
      "User-Agent" : "gzip,  My Python requests library example client or username"
      }
      if(isFile):
        with open(filename, 'rb') as input_file:
            data = input_file.read()
            file_hash_value = hashlib.md5(data).hexdigest()

      else:
          file_hash_value = filename
      #print(file_hash_value)
      params = {'apikey': API_KEY, 'resource':file_hash_value}
      if(proxy is None):
        response = requests.get('https://www.virustotal.com/vtapi/v2/file/report',params=params, headers=headers)
      else:
          response = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params, headers=headers,proxies=proxy)

      #FIXME: if result none there can be problem check this
      json_response = response.json()
      return json_response

def save_responseinMongo(json_resp):
    client = MongoClient()
    db = client['maldect']
    response_collection = db['vtresponses']
    #post = {"filename": "","path": "", "json_resp": json_resp}
    post_id = response_collection.insert(json_resp)
    return post_id

def calculateRequestCountPerDay(count,allhashes,API_KEY,proxyList):
    '''
    virustotal has a limit for usage of api. This function calculates and requests in exact duration.
    :param count: how many times virustotal let requests per day
    :param process: request function

    :return: void
    '''
    secondCountInDay = 12*60*60
    durationForOneRequest = secondCountInDay /count #olmasi gereken sure
    responses= []
    for hashOfFile in allhashes:
        start = time.time()
        print("requesting virustotal.com has been started:"+str(start)+" - "+str(hashOfFile))
        #random proxy secilir - proxy listesinden
        currProxy = proxyList[random.randrange(len(proxyList))]
        proxy = {
            'host': '',  # proxy host (Kullanılmayacaksa boş bırak)
            'port': ''  # proxy port
        }
        proxy['host'], proxy['port'] = currProxy.split(':')
        print("selected proxy:" + str(currProxy))
        #sending request to virustotal api
        json_resp = getVirustotalReport(hashOfFile, API_KEY, isFile=0, proxy=proxy)
        #json_resp mongo veritabanina kayit edilir
        save_responseinMongo(json_resp)
        responses.append(json_resp)
        end = time.time()
        print(str(hashOfFile)+" : "+str(start)+" - "+str(end))
        process_duration = end - start
        if(durationForOneRequest>process_duration): #olması gereken sureden kisa suruyor ise bekletilmeli
            print("sleeping: "+str(durationForOneRequest - process_duration))
            time.sleep(durationForOneRequest - process_duration)

def extract_all_hashes(filepath):
    filelist = fileutil.getFilePaths(filepath, extensionList=[".exe",".dll"])
    fhs = []
    with open("hashofAllFiles.txt", 'w') as output_file:
        for file in filelist:
            fh = fileutil.getFileHash(file)
            fhs.append(fh)
            output_file.write(fh+"\n")
    return fhs
def get_hash_from_textfile(textfilepath):
    with open("hashofAllFiles.txt", 'r') as output_file:
        hashes = output_file.read().split('\n')
        if (len(hashes)<=0):
            raise Exception("no hash value in text file")
        return hashes

with open('etc/virustotal_api_tokens.txt','r') as input_file:
    API_KEY_LIST = input_file.read().split()

print(API_KEY_LIST)
api =API_KEY_LIST[0]
filepath ="/media/nislab/5bece7d3-c708-491c-af60-c9e5278efd24/DATASET_ALL/BENIGN"
print("getting all file in "+filepath)
#fhs = extract_all_hashes(filepath)
fhs = get_hash_from_textfile(filepath)
print(len(fhs))
validProxyList = []
with open('valid_proxy.txt') as f:
			for proxy in f:
				validProxyList.append(proxy)
calculateRequestCountPerDay(20000,fhs,api,validProxyList)