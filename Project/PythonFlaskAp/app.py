from pymongo import MongoClient
from bson.objectid import ObjectId
from flask import Flask,render_template,jsonify,json,request


application = Flask(__name__)

client = MongoClient('localhost:27017')
db = client.maldect

@application.route('/')
def showResList():
    return render_template('list.html')

@application.route('/getRes',methods=['POST'])
def getRes():
    try:
        resId = request.json['id']
        res = db.vtresponses.find_one({'_id':ObjectId(resId)})
        resDetail = {
                'md5':res['md5'],
                    'sha1':res['sha1'],
                    'sha256':res['sha256'],
                    'scan_id':res['scan_id'],
                    'resource':res['resource'],
                    'response_code': res['response_code'],
                    'scan_date': res['scan_date'],
                    'permalink': res['permalink'],
                    'verbose_msg': res['verbose_msg'],
                    'total': res['total'],
                    'positives': res['positives'],
                    'id': str(res['_id'])
                }
        return json.dumps(resDetail)
    except Exception as e:
        return str(e)

@application.route("/addRes",methods=['POST'])
def addRes():
    try:
        json_data = request.json['info']
        md5= json_data['md5']
        sha1= json_data['sha1']
        sha256= json_data['sha256']
        scan_id= json_data['scan_id']
        resource= json_data['resource']
        response_code= json_data['response_code']
        scan_date= json_data['scan_date']
        permalink= json_data['permalink']
        verbose_msg= json_data['verbose_msg']
        total= json_data['total']
        positives= json_data['positives']

        db.vtresponses.insert_one({
            'md5':md5,'sha1':sha1,'sha256':sha256,'scan_id':scan_id,'resource':resource,'response_code':response_code,'scan_date':scan_date,'permalink':permalink,'verbose_msg':verbose_msg,'total':total,'positives':positives
            })
        return jsonify(status='OK',message='inserted successfully')

    except Exception as e:
        return jsonify(status='ERROR',message=str(e))


@application.route('/updateRes',methods=['POST'])
def updateRes():
    try:
        vtresInfo = request.json['info']
        resId = vtresInfo['id']
        md5 = vtresInfo['md5']
        sha1= vtresInfo['sha1']
        sha256= vtresInfo['sha256']
        scan_id= vtresInfo['scan_id']
        resource= vtresInfo['resource']
        response_code= vtresInfo['response_code']
        scan_date= vtresInfo['scan_date']
        permalink= vtresInfo['permalink']
        verbose_msg= vtresInfo['verbose_msg']
        total= vtresInfo['total']
        positives= vtresInfo['positives']


        db.vtresponses.update_one({'_id':ObjectId(resId)},{'$set':{'md5':md5,'sha1':sha1,'sha256':sha256,'scan_id':scan_id,'resource':resource,'response_code':response_code,'scan_date':scan_date,'permalink':permalink,'verbose_msg':verbose_msg,'total':total,'positives':positives}})
        return jsonify(status='OK',message='updated successfully')
    except Exception as e:
        return jsonify(status='ERROR',message=str(e))

@application.route("/getResList",methods=['POST'])
def getResList():
    try:
        vtresponces = db.vtresponses.find()
        
        vtReslist = []
        for vtres in vtresponces:
            print(vtres)
            vtResItem = {
                    'md5':vtres['md5'],
                    'sha1':vtres['sha1'],
                    'sha256':vtres['sha256'],
                    'scan_id':vtres['scan_id'],
                    'resource':vtres['resource'],
                    'response_code': vtres['response_code'],
                    'scan_date': vtres['scan_date'],
                    'permalink': vtres['permalink'],
                    'verbose_msg': vtres['verbose_msg'],
                    'total': vtres['total'],
                    'positives': vtres['positives'],
                    'id': str(vtres['_id'])
                    }
            vtReslist.append(vtResItem)
    except Exception as e:
        return str(e)
    return json.dumps(vtReslist)


@application.route("/deleteRes",methods=['POST'])
def deleteRes():
    try:
        resId = request.json['id']
        db.vtresponses.remove({'_id':ObjectId(resId)})
        return jsonify(status='OK',message='deletion successful')
    except Exception as e:
        return jsonify(status='ERROR',message=str(e))

if __name__ == "__main__":
    application.run(host='0.0.0.0')

